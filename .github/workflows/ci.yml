name: CI

on:
  push:
    branches: [ "master", "main" ]
    tags: ['*']
  pull_request:
    branches: [ "master", "main" ]

permissions:
  contents: read

jobs:
  validate:
    name: Format & Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Cache terraform providers
        uses: actions/cache@v4
        with:
          path: |
            .terraform/providers
            .terraform.lock.hcl
          key: ${{ runner.os }}-tf-providers-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-tf-providers-

      - name: Run quick-test (format + validate)
        run: make quick-test

      - name: Upload quick-test log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quick-test
          path: .github/artifacts/quick-test.txt

  tflint:
    name: TFLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tflint
        run: |
          curl -sSL https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash -s -- -b $HOME/.local/bin
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run tflint
        run: |
          mkdir -p .github/artifacts
          tflint --init || true
          tflint --format junit > .github/artifacts/tflint-results.xml || true
        continue-on-error: true

      - name: Upload tflint result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tflint-results
          path: .github/artifacts/tflint-results.xml

  tfsec:
    name: tfsec
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tfsec
        run: |
          echo "Installing tfsec (linux) via release binary..."
          LATEST_URL="https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64"
          curl -sSL "$LATEST_URL" -o /usr/local/bin/tfsec
          chmod +x /usr/local/bin/tfsec

      - name: Run tfsec
        run: |
          mkdir -p .github/artifacts
          tfsec --format junit --out .github/artifacts/tfsec-results.xml || true

      - name: Upload tfsec result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tfsec-results
          path: .github/artifacts/tfsec-results.xml

  checkov:
    name: Checkov
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Checkov
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install checkov

      - name: Run Checkov
        run: |
          mkdir -p .github/artifacts
          checkov -d . -o junitxml > .github/artifacts/checkov-results.xml || true

      - name: Upload Checkov result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkov-results
          path: .github/artifacts/checkov-results.xml

  update-changelog:
    name: Update CHANGELOG on tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout (fetch tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Fetch tags
        run: git fetch --tags --prune

      - name: Compute changelog for tag
        id: changelog
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "Detected tag: $TAG"
          # Find previous tag (if any)
          PREV_TAG=$(git tag --sort=-creatordate | grep -v "^$TAG$" | head -n1 || true)
          if [ -z "$PREV_TAG" ]; then
            RANGE="$TAG"
            echo "No previous tag found, using all commits up to $TAG"
          else
            RANGE="$PREV_TAG..$TAG"
            echo "Computing commits between $PREV_TAG and $TAG"
          fi
          # Build changelog section using git-cliff if available, otherwise fallback to git log
          DATE=$(date -u +%Y-%m-%d)
          NEW=/tmp/new_changelog.md
          echo "## $TAG - $DATE" > $NEW
          echo "" >> $NEW
          if command -v git-cliff >/dev/null 2>&1; then
            echo "Using git-cliff to generate changelog section"
            git-cliff --tag $TAG --output $NEW || true
          else
            echo "git-cliff not found, falling back to git log"
            if [ -z "$PREV_TAG" ]; then
              git log --pretty=format:"- %h %s (%an)" $TAG >> $NEW || true
            else
              git log --pretty=format:"- %h %s (%an)" $RANGE >> $NEW || true
            fi
          fi
          echo "" >> $NEW
          echo "(Auto-generated by CI)" >> $NEW
          echo "newfile=$NEW" >> $GITHUB_OUTPUT

      - name: Prepend to CHANGELOG.md and commit
        env:
          TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}
          REPO: ${{ github.repository }}
        run: |
          NEW=/tmp/new_changelog.md
          if [ ! -f "$NEW" ]; then
            echo "No changelog section generated, exiting.";
            exit 0;
          fi
          # Ensure CHANGELOG.md exists
          if [ ! -f CHANGELOG.md ]; then echo "# Changelog" > CHANGELOG.md; fi
          # Prepend new section
          (cat "$NEW" && echo "" && cat CHANGELOG.md) > /tmp/CHANGELOG_combined.md
          mv /tmp/CHANGELOG_combined.md CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "chore(release): update CHANGELOG for ${GITHUB_REF#refs/tags/}" || echo "No changes to commit"
          # Create a branch and push using token
          BRANCH="changelog/${GITHUB_REF#refs/tags/}"
          git branch -M $BRANCH
          git remote set-url origin https://x-access-token:${TOKEN_GITHUB}@github.com/${REPO}.git
          git push origin $BRANCH --force

      - name: Create Pull Request with changelog update
        env:
          TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}
          REPO: ${{ github.repository }}
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          BRANCH="changelog/${TAG}"
          TITLE="chore(release): update CHANGELOG for ${TAG}"
          BODY="This PR updates the CHANGELOG for tag ${TAG}.\n\nAuto-generated by CI."
          echo "Creating PR $TITLE -> $BRANCH"
          curl -s -X POST \
            -H "Authorization: token ${TOKEN_GITHUB}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${REPO}/pulls \
            -d "{\"title\":\"${TITLE}\",\"head\":\"${BRANCH}\",\"base\":\"master\",\"body\":\"${BODY}\"}" || true

