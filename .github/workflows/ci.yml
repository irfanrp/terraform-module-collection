name: CI

on:
  push:
    branches: [ "master", "main" ]
    tags: ['*']
  pull_request:
    branches: [ "master", "main" ]

permissions:
  contents: read

jobs:
  validate:
    name: Format & Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Cache terraform providers
        uses: actions/cache@v4
        with:
          path: |
            .terraform/providers
            .terraform.lock.hcl
          key: ${{ runner.os }}-tf-providers-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-tf-providers-

      - name: Run quick-test (format + validate)
        run: make quick-test

      - name: Upload quick-test log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quick-test
          path: .github/artifacts/quick-test.txt

  tflint:
    name: TFLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tflint
        run: |
          curl -sSL https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash -s -- -b $HOME/.local/bin
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run tflint
        run: |
          mkdir -p .github/artifacts
          tflint --init || true
          tflint --format junit > .github/artifacts/tflint-results.xml || true
        continue-on-error: true

      - name: Upload tflint result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tflint-results
          path: .github/artifacts/tflint-results.xml

  tfsec:
    name: tfsec
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tfsec
        run: |
          echo "Installing tfsec (linux) via release binary..."
          LATEST_URL="https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64"
          curl -sSL "$LATEST_URL" -o /usr/local/bin/tfsec
          chmod +x /usr/local/bin/tfsec

      - name: Run tfsec
        run: |
          mkdir -p .github/artifacts
          tfsec --format junit --out .github/artifacts/tfsec-results.xml || true

      - name: Upload tfsec result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tfsec-results
          path: .github/artifacts/tfsec-results.xml

  checkov:
    name: Checkov
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Checkov
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install checkov

      - name: Run Checkov
        run: |
          mkdir -p .github/artifacts
          checkov -d . -o junitxml > .github/artifacts/checkov-results.xml || true

      - name: Upload Checkov result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkov-results
          path: .github/artifacts/checkov-results.xml

  update-changelog:
    name: Update CHANGELOG on tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout (fetch tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Fetch tags
        run: git fetch --tags --prune

      - name: Install git-cliff (optional, for nicer changelogs)
        run: |
          echo "Installing rustup and git-cliff (this may take a minute)..."
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env
          cargo install git-cliff --locked || true
          echo "git-cliff version: $(git-cliff --version 2>/dev/null || echo 'not installed')"

      - name: Compute changelog for tag
        id: changelog
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "Detected tag: $TAG"
          # Find previous tag (if any)
          PREV_TAG=$(git tag --sort=-creatordate | grep -v "^$TAG$" | head -n1 || true)
          if [ -z "$PREV_TAG" ]; then
            RANGE="$TAG"
            echo "No previous tag found, using all commits up to $TAG"
          else
            RANGE="$PREV_TAG..$TAG"
            echo "Computing commits between $PREV_TAG and $TAG"
          fi
          # Build changelog section focused on modules/ and examples/, grouped by type
          DATE=$(date -u +%Y-%m-%d)
          NEW=/tmp/new_changelog.md
          REPO="${GITHUB_REPOSITORY}"
          echo "## ${TAG} - ${DATE}" > $NEW
          echo "" >> $NEW

          # Prepare category buckets
          ADDED_FILE=/tmp/ch_added.txt
          CHANGED_FILE=/tmp/ch_changed.txt
          FIXED_FILE=/tmp/ch_fixed.txt
          DOCS_FILE=/tmp/ch_docs.txt
          SECURITY_FILE=/tmp/ch_security.txt
          OTHER_FILE=/tmp/ch_other.txt
          : > $ADDED_FILE; : > $CHANGED_FILE; : > $FIXED_FILE; : > $DOCS_FILE; : > $SECURITY_FILE; : > $OTHER_FILE

          # Determine commit list in range
          if [ -z "$PREV_TAG" ]; then
            COMMITS=$(git rev-list --reverse $TAG)
          else
            COMMITS=$(git rev-list --reverse $RANGE)
          fi

          for c in $COMMITS; do
            files=$(git diff-tree --no-commit-id --name-only -r $c || true)
            if ! echo "$files" | grep -qE '^(modules/|examples/)'; then
              continue
            fi
            subject=$(git show -s --format='%s' $c)
            author=$(git show -s --format='%an' $c)
            # Extract PR number if present like (#123) or #123
            pr=$(echo "$subject" | grep -oE '\(#[0-9]+\)|#[0-9]+' | head -n1 || true)
            if [ -n "$pr" ]; then
              # normalize to #123
              pr=$(echo "$pr" | tr -d '()')
              pr_link=" ([${pr}](https://github.com/${REPO}/pull/${pr#'#'}))"
              # remove the PR token from the subject for cleanliness
              subject=$(echo "$subject" | sed -E 's/ ?\(?#?[0-9]+\)?$//')
            else
              pr_link=""
            fi
            line="- ${subject} (by ${author})${pr_link}"
            # categorize based on conventional prefixes
            lc=$(echo "$subject" | awk '{print tolower($0)}')
            if echo "$lc" | grep -qE '^feat|^feature'; then
              echo "$line" >> $ADDED_FILE
            elif echo "$lc" | grep -qE '^fix|^bugfix'; then
              echo "$line" >> $FIXED_FILE
            elif echo "$lc" | grep -qE '^docs|^documentation'; then
              echo "$line" >> $DOCS_FILE
            elif echo "$lc" | grep -qE '^security|^sec'; then
              echo "$line" >> $SECURITY_FILE
            elif echo "$lc" | grep -qE '^chore|^refactor|^perf|^ci|^build|^style|^test|^change'; then
              echo "$line" >> $CHANGED_FILE
            else
              echo "$line" >> $OTHER_FILE
            fi
          done

          # Print sections (only if non-empty)
          if [ -s $ADDED_FILE ]; then echo "### Added" >> $NEW; cat $ADDED_FILE >> $NEW; echo "" >> $NEW; fi
          if [ -s $CHANGED_FILE ]; then echo "### Changed" >> $NEW; cat $CHANGED_FILE >> $NEW; echo "" >> $NEW; fi
          if [ -s $FIXED_FILE ]; then echo "### Fixed" >> $NEW; cat $FIXED_FILE >> $NEW; echo "" >> $NEW; fi
          if [ -s $DOCS_FILE ]; then echo "### Docs" >> $NEW; cat $DOCS_FILE >> $NEW; echo "" >> $NEW; fi
          if [ -s $SECURITY_FILE ]; then echo "### Security" >> $NEW; cat $SECURITY_FILE >> $NEW; echo "" >> $NEW; fi
          if [ -s $OTHER_FILE ]; then echo "### Other" >> $NEW; cat $OTHER_FILE >> $NEW; echo "" >> $NEW; fi

          # Add comparison links at the bottom
          echo "" >> $NEW
          if [ -n "$PREV_TAG" ]; then
            echo "[${PREV_TAG}...${TAG}]: https://github.com/${REPO}/compare/${PREV_TAG}...${TAG}" >> $NEW
          fi
          echo "[${TAG}]: https://github.com/${REPO}/releases/tag/${TAG}" >> $NEW

          echo "newfile=$NEW" >> $GITHUB_OUTPUT

      - name: Prepend to CHANGELOG.md and commit
        env:
          TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}
          REPO: ${{ github.repository }}
        run: |
          NEW=/tmp/new_changelog.md
          if [ ! -f "$NEW" ]; then
            echo "No changelog section generated, exiting.";
            exit 0;
          fi
          # Ensure CHANGELOG.md exists
          if [ ! -f CHANGELOG.md ]; then echo "# Changelog" > CHANGELOG.md; fi
          # Prepend new section
          (cat "$NEW" && echo "" && cat CHANGELOG.md) > /tmp/CHANGELOG_combined.md
          mv /tmp/CHANGELOG_combined.md CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "chore(release): update CHANGELOG for ${GITHUB_REF#refs/tags/}" || echo "No changes to commit"
          # Create a branch and push using token
          BRANCH="changelog/${GITHUB_REF#refs/tags/}"
          # We're on a detached HEAD when the workflow runs for a tag, so create a new branch from HEAD
          git checkout -b "$BRANCH"
          git remote set-url origin https://x-access-token:${TOKEN_GITHUB}@github.com/${REPO}.git
          git push origin $BRANCH --force

      - name: Create Pull Request with changelog update
        env:
          TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}
          REPO: ${{ github.repository }}
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          BRANCH="changelog/${TAG}"
          TITLE="chore(release): update CHANGELOG for ${TAG}"
          BODY="This PR updates the CHANGELOG for tag ${TAG}.\n\nAuto-generated by CI."
          echo "Creating PR $TITLE -> $BRANCH"
          curl -s -X POST \
            -H "Authorization: token ${TOKEN_GITHUB}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${REPO}/pulls \
            -d "{\"title\":\"${TITLE}\",\"head\":\"${BRANCH}\",\"base\":\"master\",\"body\":\"${BODY}\"}" || true

